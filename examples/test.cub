-- This is a one line comment.

{- This comment
   is actually
   three lines. Fun. -}

-- The natural numbers.
data N = zero | suc (n : N)

-- A type declaration.
f : (a : A) (b c d : B) -> N -> N

-- a function declaration
fst x y = x

plus : N -> N -> N
plus n m = case n of
  zero  -> m
  suc n -> suc k
    where k = plus n m

local x = let x = x
          in plus x x

data List (A : U) = nil | cons (x : A) (xs : List A)

head : (A : U) -> List A -> A
head _ xs = case xs of
  nil -> nil
  cons x xs -> x

lambda : A -> B -> C -> A
lambda = \x y z -> x

id : A -> A
id x = x 