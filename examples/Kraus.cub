module Kraus where

import swapDisc
import testInh

-- we encode the example of Nicolai Kraus
-- for this we need the impredicative encoding of propositional truncation

-- swap with zero

swZero : N -> N -> N
swZero = swapDisc N natDec zero

lemSwZero : (x:N) -> neg (Id N zero x) -> Id N (swZero x x) zero
lemSwZero x neqzx = idSwapDisc1 N natDec zero x neqzx

lem1SwZero : (x:N) -> neg (Id N zero x) -> isEquiv N N (swZero x)
lem1SwZero x neqzx = idemIsEquiv N (swZero x) (idemSwapDisc N natDec zero x neqzx)

-- we deduce that (N,x) is equal to (N,0) for any x in N

homogDec : (X:U) -> discrete X -> (x y:X) -> Id ptU (pair X x) (pair X y)
homogDec X dX x y = orElim (Id X y x) (neg (Id X y x)) (G x) rem1 rem (dX y x)
 where
   G : X -> U
   G z = Id ptU (pair X z) (pair X y)

   rem0 : G y
   rem0 = refl ptU (pair X y)

   rem : neg (Id X y x) -> G x
   rem neqzx = lemPtEquiv X X (swapDisc X dX y x) 
                (idemIsEquiv X (swapDisc X dX y x) (idemSwapDisc X dX y x neqzx)) 
                x y (idSwapDisc1 X dX y x neqzx)

   rem1 : Id X y x -> G x
   rem1 eqzx = subst X G y x eqzx rem0

homogeneous : (x:N) -> Id ptU (pair N x) (pair N zero)
homogeneous x = homogDec N natDec x zero

-- the following type is a contractible, hence a proposition

sNzero : U
sNzero = singl ptU (pair N zero)  -- Sigma (Sigma U (id U)) (\ v -> Id ptU u (pair N zero))

propSNzero : prop sNzero
propSNzero = singlIsProp ptU (pair N zero)

-- we have a map inhI N -> sNzero, with the notation of Nicolai Kraus

flifted : inhI N -> sNzero
flifted = inhrecI N sNzero propSNzero (\ x -> pair (pair N x) (homogeneous x))

Tmyst : inhI N -> U
Tmyst x = fst U (id U) (fst ptU (\ v -> Id ptU v (pair N zero)) (flifted x))

myst : (x: inhI N) -> Tmyst x
myst x = snd U (id U) (fst ptU (\ v -> Id ptU v (pair N zero)) (flifted x))

mystN : (n: N) -> Tmyst (incI N n)
mystN n = myst (incI N n)

propMyst : (n:N) -> Id N (myst (incI N n)) n
propMyst n = refl N n

testMyst : N -> N
testMyst n = myst (incI N n)