module equivset where

import testprim

-- g is a section of f 
section : (A B : U) (f : A -> B) (g : B -> A) -> U
section A B f g = (b : B) -> Id B (f (g b)) b

injective : (A B : U) (f : A -> B) -> U
injective A B f = (a0 a1 : A) -> Id B (f a0) (f a1) -> Id A a0 a1

retract : (A B : U) (f : A -> B) (g : B -> A) -> U
retract A B f g = section B A g f

retractInj : (A B : U) (f : A -> B) (g : B -> A) -> 
             retract A B f g -> injective A B f
retractInj A B f g h a0 a1 h' = lemTrans A (g (f a0)) a0 (g (f a1)) a1 rem1 rem2 rem3
  where
  rem1 : Id A (g (f a0)) a0
  rem1 = h a0

  rem2 : Id A (g (f a1)) a1
  rem2 = h a1

  rem3 : Id A (g (f a0)) (g (f a1))
  rem3 = cong B A g (f a0) (f a1) h'


set : U -> U
set = UIP

equivSet : (A B : U) (f : A -> B) (g : B -> A) -> (section A B f g) 
           -> (injective A B f) -> (set B) -> Id U A B
equivSet A B f g sfg injf setB = equivEq A B f sf tf
  where
  fFiber : B -> U
  fFiber b = fiber A B f b

  fstfFiber : (b : B) -> fFiber b -> A
  fstfFiber b = fst A (\x -> Id B (f x) b)

  eqfFiber : (b : B) -> (v v' : fFiber b) ->
             Id A (fstfFiber b v) (fstfFiber b v') -> Id (fFiber b) v v'
  eqfFiber b = eqPropFam A (\x -> Id B (f x) b) (\x -> setB (f x) b)

  sf : (b : B) -> fFiber b
  sf b = pair (g b) (sfg b)

  tf : (b : B) (v : fFiber b) -> Id (fFiber b) (sf b) v
  tf b v = eqfFiber b (sf b) v rem
    where
    a' : A
    a' = fstfFiber b v

    rem1 : Id B (f (g b)) (f a')
    rem1 = comp B (f (g b)) b (f a') (sfg b)
           (inv B (f a') b (snd A (\x -> Id B (f x) b) v))

    rem : Id A (g b) a'
    rem = injf (g b) a' rem1

-- Bool tests:

equivBool : Id U Bool Bool
equivBool = equivSet Bool Bool not not notK notInj boolIsSet

mBool3 : monoid Bool
mBool3 = transm Bool Bool equivBool monoidAndBool

opBool3 : Bool -> Bool -> Bool
opBool3 = opm Bool mBool3

testTF3 : Bool
testTF3 = opBool3 True False

testFT3 : Bool
testFT3 = opBool3 False True

testFF3 : Bool
testFF3 = opBool3 False False

testTT3 : Bool
testTT3 = opBool3 True True

