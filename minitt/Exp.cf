comment "--" ;
comment "{-" "-}" ;

layout "where", "let", "of" ;
layout stop "in" ;
layout toplevel ;

Module. Module ::= [Def] ;

Def.      Def ::= AIdent [Arg] "=" ExpWhere ;
DefTDecl. Def ::= AIdent ":" Exp ;
DefData.  Def ::= "data" AIdent Tele "=" [Sum] ;
separator Def ";" ;

Where.   ExpWhere  ::= Exp "where" "{" [Def] "}" ;
NoWhere. ExpWhere  ::= Exp ;

Let.    Exp  ::= "let" "{" [Def] "}" "in" Exp ;
Lam.    Exp  ::= "\\" [Binder] "->" Exp ;
Case.   Exp  ::= "case" Exp "of" "{" [Branch] "}" ;
Fun.    Exp  ::= Exp1 "->" Exp ;
Pi.     Exp  ::= TeleNE "->" Exp ;
App.    Exp1 ::= Exp1 Exp2 ;
Var.    Exp2 ::= Binder ;     -- check for "_". this also lead to s/r conflicts
U.      Exp2 ::= "U" ;

coercions Exp 2 ;

Binder.   Binder ::= Arg ;
separator nonempty Binder "" ;

-- Like Binder, but may be empty
Arg.      Arg ::= AIdent ;
NoArg.    Arg ::= "_" ;
terminator Arg "" ;

-- Branches
Branch.  Branch ::= AIdent [Arg] "->" ExpWhere ;
separator Branch ";" ;

-- Labelled sum alternatives
Sum.    Sum   ::= AIdent Tele ;
separator Sum "|" ;

-- Telescopes
Tele. Tele  ::= [VDecl] ;

-- Nonempty telescopes
TeleNE. TeleNE ::= [VDeclNE] ;

VDecl.  VDecl ::= "(" [Binder] ":" Exp ")" ;
terminator VDecl "" ;

VDeclNE.  VDeclNE ::= VDecl ;
terminator nonempty VDeclNE "" ;

position token AIdent (letter(letter|digit|'\'')*) ;
terminator AIdent "" ;